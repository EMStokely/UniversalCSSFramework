
/* ======================= UNIVERSAL CSS FRAMEWORK ======================
Title: Universal CSS Framework, version 2.0.0.0
Author: Mitchell Stokely (updated March, 2021)

Description: This style sheet is part of a complete "progressive" CSS framework designed for cross-browser style sheet support in browsers going back to the birth of the World Wide Web in the 1990's. It provides old browsers the minimum styles needed to display content, while adding newer styles for more modern browsers that can display more modern CSS. I call this the "Universal CSS Framework" because it was designed to universally support as many web browsers as possible, including those that did not support CSS. This system should provide some form of basic layout or design in all browsers, old and new, with a rich cascading style sheet system that degrades gracefully to simpler layouts in the older browsers.

The first "1.0" version of this CSS system was originally constructed in June of 2004, though its initial designs were laid down in 2001. This "2.0" version is a major upgrade I built to accommodate new HTML5 and CSS3 standards. You will see those more modern features in parts of the newer sheets designed for more modern browsers and much better fixes for many older browsers, as well.

Please note that this solution is Javascript-free!

============================ STYLE SHEET NOTES ===========================
This importer sheet is part of a complete CSS cross-browsers style sheet framework designed to support your CSS in browsers going back to the birth of the World Wide Web. This sheet uses special @Import rules not supported by older browsers to hide newer more modern styles like Bootstrap from them and allow much older agents to use a simpler block level layout. It allows newer browsers to access your full range of newer CSS and complex layouts that are imported in below. Using that strategy this CSS System allows you to support 99.99% of browsers going back to the 1990's, while moving forward with newer cutting edge CSS3 styles and layouts in more modern browsers. It also allows you to use other style sheet systems while supporting older browsers that do not and need simpler styles and layouts using a "progressive" degradation strategy. As such, older browsers will see a simpler, block-level and readable version of your web pages. This is contingent on clean, structured HTML.

============================ STYLE SHEET INSTRUCTIONS =====================
For full install instructions see the "OldBrowsers.css" style sheet. This cross-browser style sheet system relies on special @import versions of sheets below to handle cross-browser issues and add or exclude CSS designs and layouts in old and new browsers. You may precompile "Styles.css" only or add your own custom CSS files separate from this CSS framework, as long as you import in the final product. This is a Javascript-free, CSS hack-free solution. You can remove comments in all these sheets or customize the CSS as you like. The ability to cascade imported sheets over old earlier sheets relies on this @import style sheet structure below. For this reason, if you want to support older browsers, DO NOT CHANGE THIS STRUCTURE OR PRECOMPILE THIS FILE OR ANY OF THE CSS FILES BELOW (except "Styles.css")!

================ NOTES ON THIS CROSS-BROWSER STYLE SHEET SYSTEM ===========
The following notes are added to help you understand how this sheet works and why you might want to use it:

@IMPORT: You will see below that this page "imports" in additional attached style sheets into it. @import is not supported in very old browsers so these newer styles and sheets below will not be seen in many older user-agents. The linked "OldBrowsers.css" sheet will be the only style sheet these older browsers get, in most cases (see below for browser versions). The rules of CSS say imported sheets will add styles BEFORE the styles in the sheet that imports them, and must be imported in first or they are ignored. For that reason I have elected to not mix imported sheets with styles in this page. Imported sheets, in general, are hidden from many older browser versions, which allows you to apply specific formatting for very old browsers like Netscape 4 series, Internet Explorer 5.2 for Mac, and IE 1-7 for PC. The "OldBrowsers.css" linked style sheet gets written over by the imported sheets in newer agents. This is the motivation for why this style system was built and how it works. Thus, only the "OldBrowsers.css" sheet gets loaded for old browsers and the rest of the imported ones are applied to more modern browsers. This system allows a wide range of older agents that don't support import or newer CSS to simply get a clean "reset" of their CSS elements which turns their pages into div blocks of content, while hiding all the fancier CSS in your imported CSS from them. The imported sheets will cascade over all the old browser sheets and give newer browsers the latest cutting-edge CSS without affecting styles delivered to old agents in the other linked sheets.

DOES THE ORDER OF LINKED AND EMBEDDED STYLE SHEETS MATTER? YES!! Why? Newer browsers now honor specific style sheet "source order" regardless of linked vs embedded, but in older ones they honored the standard! In the older browsers most ignored the order of linked and embedded sheets and tried to follow the standard, where it did not matter if linked sheets came before embedded <style> element styles. The embedded ones ALWAYS were applied last after downloading all style sheets. Newer browsers today using HTML5 decided to ignore W3C and Web Standards, so now order does matter! This means, in  most modern browsers, if you place any embedded <style> elements BEFORE these linked sheets, the linked sheets can and will cascade over your embedded styles. It also means linked styles with styles having the same specificity that come AFTER other sheets will win in the cascade as the last styles have higher order. This is counter-intuitive, so I recommend you ALWAYS PUT LINKED STYLES IN THE CORRECT ORDER AND BEFORE EMBEDDED STYLES TO PREVENT PROBLEMS IN OLD AND NEW BROWSERS!


MANY DEVELOPERS SAY @IMPORT MEANS YOU CSS IMPORTED FILES CANNOT DOWNLOAD IN PARALLEL: Not true....I will explain...

First of all, multiple @imports combined in either an embed <style> element or multiple inside a <link> tag all download in parallel to each other. (That is true even for old IE browsers). In the case of multiple @import rules inside a <link> tag and parent CSS sheet, these also all download in parallel and use the same connection as the parent style sheet, as well. They just do not download in parallel to the parent sheet.

So the @import sheets in this linked sheet below all download in parallel to each other. So if we had this parent sheet:

<link media="screen" rel="stylesheet" type="text/css" href="parent.css" />

...then inside the parent.css sheet above we have the following @import children, they all should download in parallel and in most browsers and share the same TCP connection:

@import url('child1.css');
@import url('child2.css');
@import url('child3.css');
@import url('child4.css');

In the second example below, these @import declarations embedded in an HTML <style> tag should also download in parallel to each other. From what I have read, they might have order issues using @import like this, but your CSS should rarely be dependent on cascade order.

<style>
  @import url('child1.css');
  @import url('child2.css');
  @import url('child3.css');
  @import url('child4.css');
</style>

The ONLY time @import does have issues is the following limited scenarios:

    You are using IE version 4-9, primarily, which had historically limited connections (IE6 had only 2 connection to the server, for example). With these browsers various @import and linked CSS in combination fail to download in parallel.
    In the first case above where a <link> parent style sheet holds imported sheets, because the parent sheet has to connect and parse its CSS file first, it adds one extra connection to the server. That makes logical sense and should be expected.
    In the first case above where a <link> parent style sheet holds multiple imported sheets, IF the parent sheet also has additional CSS plus the @imports, that explains the major non-parallel CSS connection as in that one case the parent CSS file has to be downloaded first with a large amount of CSS parsed, BEFORE any @imports also in the file are then downloaded. This also makes logical sense and why you should NEVER combine CSS with @import style rules in any CSS style sheet.
    If you combine a <link> style sheet that has no imported rules with either a linked style sheet with an @import or an embedded <style> with @import, in IE they generally wont download in parallel. As mentioned this may be related to IE's limited browser connections. But other browsers as far as I know support this.

So, based on these rules, in most situations, @import works fine. The main gotcha is when adding @import into a sheet with a lot of plain CSS. That delays the @import of new sheets until the full CSS file and its rules are parsed. But I do not ever do that in any of my "import" parent sheets, like this one. It ONLY has @import rules! So combining CSS with @import in the same sheet would cause a long delay as the parent parses its own CSS then discovers additional @imports to download. We have again avoided that here.





============== NOTES ON @IMPORT BROWSER HACKS USED BELOW ===================
The Imported sheets below, in general, are hidden from many older browsers. The imports below would not be seen by those browsers and only new browsers should load them. But this system relies on very specific version of @import (hacks). These browsers below would only see the initial linked basic reset element style sheet ("OldBrowsers.css") but not the imported ones below based on these imported style sheet rules. See below for more specifics.

HOW THE IMPORT CSS FIX WORKS?
All browsers old and new will first read the linked "OldBrowsers.css" style sheet. @import style sheets are then loaded by this sheet. Certain older browsers that try and read the @import 'versions' below will fail, however, and so all later style sheets that are imported using various @import formats listed below will be ignored by them. Those old unsupportive browsers are listed below. All newer browsers will see these imported sheets. That means the browsers listed below will just get the linked "old browser" basic element styles and display their content in a clean, white, block-level display that is fully functional, but without the fancier layout features. These newer style sheets, therefore, will not be downloaded or applied to the old browsers listed below. The following @import tricks were used to show and hide style sheets from legacy browsers as follows. The order of most support of @import by old browsers to the least support of @import is used below to gradually add fancier and fancier style sheets with more styles until all the browsers listed below are completely excluded from the newest sheets. Keep in mind, I may list a browser as "IE 1-3, but only version "3" supported CSS. I just did that for you to realize both CSS supporting and non-supporting browsers are excluded. The first browsers to support CSS style sheets were Netscape 4 and Internet Explorer 3. Note that older Mozilla and Netscape 6 (pre-2008) could be triggered into "Netscape 4" or "compatibility mode" by removing all DOCTYPES at the top of a typical HTML page, which reverts to the buggy Netscape 4 original code base. Internet Explorer 6 could be triggered back to IE 5.5 by removing a doctype or placing code before it.
------------------------------------------------------------
NO CSS SUPPORT in these browsers:
- Netscape 1-3
- Internet Explorer 1-2
- Opera 1-2
- Lynx
- HotJava 3(Sun)
- QNX Voyager
- WebTV 2
------------------------------------------------------------
1. @import url("...") or @import url(...)
Is hidden from:
- Netscape 1-4.8 (Netscape 4 series does not support any form of @import)
- Opera 1-3.5
- Windows Internet Explorer 1-2 (no CSS support)
- Windows Internet Explorer 3 (IE 3 is hidden from CSS using @import url("...") or url(...))
- Windows Internet Explorer 4 (IE 4 is hidden from CSS using @import url("..."). Exception: IE 4 supports CSS using url('...') and url(...), however, but only when CSS file in same directory as page)
- Windows Internet Explorer 6.x (some evidence shows IE 6 cannot see imports when only using url(...))
- Macintosh Internet Explorer 2-4.5
- Konqueror 1-2.1
- Windows Amaya 1-5.1
- iCab 1-2
- OmniWeb
* Note: If you just want to EXCLUDE Windows Netscape 1-4 and IE 1-3, then use @import url(...)
* Note: 80%+ of non-CSS supporting browsers in 2000 was Windows Netscape 3, if that is what you need to target.
* Note: IE 1-2 and Netscape 1-3 never supported style sheets anyway, so would never see your sheets regardless of import rules.
------------------------------------------------------------
2. @import url('...');
Is hidden from:
- All browsers listed in #1
- plus Macintosh Internet Explorer 4-5.x (basically all IE for Macs)
------------------------------------------------------------
3. @import "...";
Is hidden from:
- All browsers listed in #1
- plus Macintosh Internet Explorer 4.x
- plus Windows Internet Explorer 4.x and lower
------------------------------------------------------------
4. @import '...';
Is hidden from:
- All browsers listed in #1, #2, and #3
------------------------------------------------------------
5. @import"..." or @import'...';(space removed after "@import")
Is hidden from:
- All browsers listed in #1, #2, and #3
- plus Windows Internet Explorer 5.x
------------------------------------------------------------
6. @import '...' all;
Is hidden from:
- All browsers listed in #1, #2, and #3
- plus Windows Internet Explorer 5.x-7.x (Note: This fails as old IE versions do not support a media type after the url ("all") and so drop the style sheet import call. Some IE sub-versions here may work with "all" and need "sheet" or "random name" instead to fail, it has been found.)
------------------------------------------------------------
7. @import("...") or @import('...') or @import url(...) or "@import url(...) not all"
Is hidden from:
- All browsers mentioned above BUT IE 4-5.x for Mac (and Mac Safari browser versions) due to the removed space between "import" and "(" or the "not all" rule added.
- Some later version of browsers may also fail on import using this format, so test!
* Note: Down below, I have used this version of @import plus wrapped an additional CSS comment-like "hack" only IE5 for Mac reads to further exclude this sheet from all old and new browsers, including IE5 for Windows. The end result is I can target IE 4-5 for Mac alone with it.
* Note: This hack above was originally designed for support of "IE 4-5 for Mac" only. But it might work for IE5 for Windows too, so test! Using this import with the added comment hack below, it would exclude all browsers, including IE5 for Windows, but be seen only by Mac IE5.
------------------------------------------------------------
Additional Style Fixes:
- IMPORTANT: Combining the above rules you can essentially hide IE 1-7, including IE 1-5 for Mac, Netscape 1-4 using the simple import rule format: @import '...' all;
- IE8 Only Import Rule: It's also possible to hide IE8 by moving your imports into an internal page <style> sheet, add your import as above to exclude most older browsers, but BEFORE the import in your <style> tag, add normal styles. Normally, adding any style rules before @import in a <style> tag will disable them, but IE8 still reads them. So you could essentially create a style sheet just for IE8 this way. I have not.
- Handling No-Style Browsers: The major browsers that did not support CSS styles in the past were Netscape 1-3 and IE 1-2 (<1996). These are long dead but my system supports them in using clean HTML as well as a simple text alert "div" asking them to upgrade their browser. I simply added a "display:none" inline style which for non-CSS browsers would be ignored, showing those browsers this alert box in the web page. So for them, the message would always appear at the head of every page!
------------------------------------------------------------
* Using the above @import CSS designs, this style sheet system implemented the following solutions to show/hide styles from legacy browsers:

1. First linked (<link>) style sheets were added for "OldBrowsers.css" so that its styles were given to all old browsers that even support CSS1, since linked CSS support goes way back in browser history, pre-2001. EVERY BROWSER WILL READ THIS SHEET BUT NON-SUPPORTING CSS BROWSERS! All the rest will load this linked CSS file ok, so its universal to all and resets their element styles to the same core look and feel. Those that do not will simply revert to their plain default HTML element styles.
2. This import sheet, NewBrowsersImporter" is linked next from the same web page and contains just @import calls, no styles. This sheet ONLy includes the @import hacks to exclude various levels of older browsers, until the "new" sheets are loaded for the newest browsers (see below).
3. Next I import in "OldBrowsersFix1" using  @import("...") plus an elaborate CSS comment hack, which is only seen by "IE5 for Mac" browsers.
4. Next I import in "OldBrowsersFix2" using @import url("...") which excludes all version 3 or older browsers. It then allows us to target special issues specific to the following subset of middle-tier browsers: IE 4-7, Opera 3-5, Mozilla 1+ and other middle-tier browsers pre-2010.
5. Next I import in "NewBrowsers" using (@import "..." all) to hide the last sheets from IE4-7 and nearly all the older browsers (pre-2001). This sheet supports all newer browsers post-2010. This @import rule format works in all newer, more modern browsers (v5+) going forward, and allows you to safely use most CSS3 and modern styles. Note: Internet Explorer version 4-7, which includes troublesome IE6, will NOT be able to access any styles in this newer sheet when using this import rule! Instead, those browsers will use the same primitive "OldBrowsers" reset style sheet plus the "fix2" sheet described above. This allows these older IE browsers to use the older browser designs, which is a linear, white, block-level CSS layout design tailored for them minus the fancier CSS layout designs your modern CSS classes support in this "NewBrowsers" sheet.
6. Last I import in "Styles" and "Mobile" sheets using the same above rule of (@import "..." all). That means the same exclusion rule applies as far as browsers. Place all your web page custom classes and styles in these two pages. 
7. Last of all I (<link>) to a print sheet. Using a simple <link> to import the style sheet rather than "@media print" or other tricks which fail in many browsers, I use a simple linked sheet for printing which is widely supported in many very old browsers. Using this one linked print sheet, you can then safely add any styles only seen by printers. Most old and new browsers will use only that sheet when reading styles for print.
8. Order of Styles: In older browsers pre-2010 the order of linked to embedded <style> sheets didn't matter as embedded were always ordered last after linked sheets in the <head> of every HTML page. In newer browsers that system was changed, so ORDER MATTERS. For that reason, I always place "linked" (<link>) before "embedded" (<style>) to simulate the old browsers standard and avoid issues where two identical selectors clash and you need to follow stricter cascade order. Remember, the last style rule wins when using linked and embedded CSS mixed in the head of the page in modern browsers now! As just mentioned, in terms of linked style sheet order, order really should not matter. But some older browsers like IE3 did not allow multiple style sheets and removed all but the last one. So, if you want to support IE3 issues I recommend you order the style sheets so your linked sheets are as follows: "Print" sheet first, "BootstrapImporter" (if you use Bootstrap), "NewBrowsersImporter", then "OldBrowsers" last. "NewBrowsersImporter" imports in multiple sheets that have more selective styles than the others (added "body" or "html" to every selector). And so it can come safely before "OldBrowsers" and still cascade over all its selectors. Each sheet also has a wildcard or other rule that tries to "reset" all previous styles using "all:revert". So, you can safely change the order because none of my style sheets rely on cascade order, only selector weight. They also do not rely on each other's styles, nor do they combine styles as they are completely independent of each other. This allows you to change style order as you like or remove style sheets as you like, though I do not recommend it.
9. WARNING: You must NOT put any styles before @import rules inside any of the "Importer" sheets. If you do, the style sheet imported is ignored in most browsers. According to the CSS specs, @import rules must precede any other CSS rules in a stylesheet or they are ignored! 
10. You are now 100% FREE of having to provide old style hacks and fixes for many of these older browsers (including IE1-7). You can now focus on your newer CSS3 styles and HTML5 layouts going forward! Just make sure you use this style framework and that you import in styles sheets exactly as designed below.
11. All CSS style links must be in the same directory as each other, and in the directory referred to in many older browsers for the imported or linked sheets to work. 
12. Make sure you always use ABSOLUTE PATHS for all style paths. Use ONLY lowercase as CSS class names are case-sensitive in XML-friendly parsers.
======================================================================================== */




/* ======================== START : IMPORT IN STYLE SHEETS ============================= */

/* OLD BROWSERS FIX 1: Internet Explorer 5 for Mac browser fixes added below. This hack below has two parts: A special CSS comment wrapper that excludes all but IE5 for Mac, then a @import rule that only targets IE for Windows and Mac. These two hacks combined will allow older Macs with older IE browsers to see your layouts correctly in clean, correctly sized blocks. IE 5-5.5 sees stylesheets that are imported with no space between the @import statement and the URL, when the word "url" is omitted from the statement, like this: @import("...") or @import(...). Other IE/Windows, Mozilla, Netscape 4, and Opera will not load stylesheets referenced in this way. Adding the comment hack below also is hidden from all browsers but IE5 for Mac. */

/*\*//*/
@import("OldBrowsersFix1.css"); 
/*end*//**/



/* OLD BROWSERS FIX 2: Internet Explorer 4-7 and other element style browser fixes added below. This style sheet fix applies a few last minute unique styles that lie outside most older Mac browsers and older Windows IE browsers but which still support CSS1 @import and which have flaws (including troublesome IE5.5 and IE6). Any special styles you need to target as far as elements and types in these 'middle-tier' old browsers would go in the style sheet below. Also, since these are the last styles those older browsers receive in the system, if you still want to target them as far as further layout fixes, custom refinements, or class-level "hacks", add them in the style sheet below.

Browsers styled by this sheet would primarily include:

- Windows IE 4-7
- Opera 3-6
- Netscape 6

*/

@import url('OldBrowsersFix2.css');


/* MODERN BROWSERS ELEMENT FIXES: This is the main modern "reset" element style sheet that matches "OldBrowsers.css". It cascades over/duplicates all the type or element selectors in "OldBrowsers.css" and adds current modern CSS styling standards (CSS2, CSS3, and later), making sure they are re-styled using the newer 'relative' font style property values. It goes back and adds modern font and layout units and changes pixel fonts in older agents on elements to relative fonts styling for newer browsers. Note: The "all" media type add to the @import below means this import should be hidden from IE versions 1-7 and a range of older browsers pre-2001, as IE does not understand "all" media type on @import. IE 8-11 would still see the imported style sheet below and be your major browser set of concern. You will see I have added CSS "hacks" inside this sheet below for IE 8, 9, 10, and 11 so you can safely address those middle-tier browser issues as needed. */

@import 'NewBrowsers.css' all;



/* CUSTOM PAGE STYLES GO HERE: Add your custom CSS web page styles into this sheet. You can safely use modern CSS3 styles going forward in here, knowing that older IE 8-11 will still see this sheet (same as above). Those should be the only browsers you need to address as far as custom CSS. In this sheet add any font-styling, layouts, and desktop styles you need. You can also precompile this sheet or minimize it as you like as it should not need any hacks or fixes, unlike previous sheets. IE 8-11 fixes would be it. You may move those to an additional imported sheet you do not precompile, if you like. Again, the "all" media type below means this import should be hidden from IE versions 1-7 and a range of older browsers pre-2001. */

@import 'Styles.css' all;



/* MOBILE STYLES GO HERE: Add your custom CSS styles for mobile devices set via media queries here. This @import rule follows the same strategy used above in two previous sheets. Again, the "all" media type below means this import should be hidden from IE versions 1-7 and a range of older browsers pre-2001. */

@import 'Mobile.css' all;



/* ========================== END : IMPORT IN STYLE SHEETS ============================= */
